#!/bin/bash

set -e

# version number
version="0.8.2"

# set default output filename
output_file="METADATA.md"

# set default warning flag
show_warnings=false

# set default tree flag
print_tree=false

# function show help 
show_help() 
    {
        echo "frictionless2md - Convert frictionless datapackage to markdown"
        echo
        echo "Usage: frictionless2md [OPTIONS] [ARGS] ..."
        echo
        echo "Options:"
        echo "  -h, --help           Get help (this message)"
        echo "  -v, --version        Get version number"
        echo "  -w, --warnings       Show all warnings"
        echo "  -t, --help           Print repository structure"
        echo "  -u, --userepo TEXT   Specify GitHub username and repository name"
        echo "  -o, --output  TEXT   Specify output filename"
        echo ""
        echo "Example:"
        echo "frictionless2md -w -t -u indecis-it/data -o my-project-metadata.md"
        echo ""
        echo "Infos:"
        echo "See more at https://github.com/dennisangemi/frictionless2md"
    }

# function show error for missing argument
show_error_arg()
   {
      local option=$1
      echo -e "❌ \e[31mError: Option $option requires an argument.\e[0m See usage details running $0 --help" 1>&2
   }

# function show error for invalid option
show_error_invalid_option()
   {
      local option=$1
      echo -e "❌ \e[31mError: Option $option is not valid.\e[0m See usage details running $0 --help" 1>&2
   }

# function show version
show_version()
   {
      echo "$version"
   }

# function pause
pause()
   {
      read -p "Press [Enter] key to continue..."
   }

# function dev options checker
dev_option_checker()
   {
        echo output file:    $output_file
        echo show worinings: $show_warnings
        echo print tree:     $print_tree
        echo username:       $username
        echo repository:     $repository

        pause
   }

### OPTIONS ###
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -o|--output)
            if [[ -n $2 ]]; then
                output_file=$2
                shift 2
            else
                show_error_arg $1
                exit 1
            fi
            ;;
        -u|--userepo)
            if [[ -n $2 ]]; then
                user_repo=$2
                if [[ "$user_repo" == *"/"* ]]; then
                    # store username and repository name in variables
                    username=$(echo $user_repo | cut -d'/' -f1)
                    repository=$(echo $user_repo | cut -d'/' -f2)

                    # check if username is empty
                    if [ -z "$username" ]; then
                        echo -e "❌ \e[31mError: Option -u requires a GitHub username\e[0m" 1>&2
                        exit 1
                    fi

                    # check if repository is empty
                    if [ -z "$repository" ]; then
                        echo -e "❌ \e[31mError: Option -u requires a repository name\e[0m" 1>&2
                        exit 1
                    fi

                    echo "✅ Github username and repository name are valid."
                else
                    echo -e "❌ \e[31mError: syntax is not correct. The argument must contain a github username and a repository name splitted by a slash.\e[0m" 1>&2
                    exit 1
                fi
                shift 2
            else
                show_error_arg $1
                exit 1
            fi
            ;;
        -w|--warnings)
            show_warnings=true
            shift
            ;;
        
        -t|--tree)
            print_tree=true
            shift
            ;;

        -v|--version)
            show_version
            exit 0
            ;;

        -h|--help)
            show_help
            exit 0
            ;;
        *)
            show_error_invalid_option $1
            exit 1
            ;;
    esac
done

# dev check
# dev_option_checker

### CHECK IF DATAPACKAGE EXISTS ###
echo "🔍 Checking datapackage..."
# if datapckage exists, set package format else exit
if [ -f datapackage.yaml ]; then
    package_format="yaml"
elif [ -f datapackage.json ]; then
    package_format="json"
else
    echo -e "❌ \e[31mError: datapackage not found\e[0m" 1>&2
    echo "Please create a datapackage.json or datapackage.yaml file."
    exit 1
fi

# confirm existance
echo "✅ datapackage exists"


### CHECK DATAPACKAGE VALIDITY ###
# WIP #16
valid_key_check=$(frictionless validate datapackage.$package_format --pick-errors "package-error" --json | jq '.tasks | has(0)')
# if package is valid
if [ $valid_key_check = "true" ]; then
    echo "✅ datapackage is valid"

    # if package is yaml, convert to json
    if [ $package_format = "yaml" ]; then
        yq . datapackage.yaml > datapackage.json
    fi
else
    echo -e "❌ \e[31mError: datapackage is invalid\e[0m" 1>&2
    exit 1
fi


### SETUP $output_file ###
echo "🛠  Building $output_file..."
# if $output_file exists, delete it
if [ -f $output_file ]; then
    rm $output_file
fi
# create new $output_file
touch $output_file


### PACKAGE TITLE ###
# check if title key exists
valid_key_check=$(jq -r '. | has("title")' datapackage.json)
# if title key exists, add title to $output_file
if [ "$valid_key_check" = "true" ]; then
    echo "#" "$(cat datapackage.json | jq -r '.title')" >> $output_file
    echo "" >> $output_file
else
    # if show_warnings flag is true, print warning
    if [ "$show_warnings" = true ]; then
        echo -e "⚠️  Warning: Title key not found"
        echo "Your $output_file will not contain a title"
    fi
fi


### PACKAGE DESCRIPTION ###
# check if description key exists
valid_key_check=$(jq -r '. | has("description")' datapackage.json)
# if description key exists, add description to $output_file
if [ "$valid_key_check" = "true" ]; then
    echo "$(cat datapackage.json | jq -r '.description')" >> $output_file
    echo "" >> $output_file
else
    # if show_warnings flag is true, print warning
    if [ "$show_warnings" = true ]; then
        echo -e "⚠️  Warning: Description key not found"
        echo "Your $output_file will not contain a description"
    fi
fi


### REPOSITORY STRUCTURE ###
# if tree flag is set, add tree to $output_file
if [ "$print_tree" = true ]; then
    echo "## Repository structure " >> $output_file
    echo "\`\`\`" >> $output_file
    echo "$(tree | head -n -2)" >> $output_file
    echo "\`\`\`" >> $output_file
    echo "" >> $output_file
else
    # if show_warnings flag is true, print warning
    if [ "$show_warnings" = true ]; then
        echo -e "⚠️  Warning: Tree flag (-t) not set. Your $output_file will not contain a repository structure"
    fi
fi


### DATA DICTIONARY ###
echo "## Data Dictionary" >> $output_file
# count the number of resources
n_resources=$(cat datapackage.json | jq -r '.resources[].name' | wc -l)
# loop over resources
for (( i=0; i<$n_resources; i++ ))
do
    # get resource infos
    filename=$(cat datapackage.json | jq -r '.resources['$i'].name')
    filepath=$(cat datapackage.json | jq -r '.resources['$i'].path')
    title=$(cat datapackage.json | jq -r '.resources['$i'].title')

    # print resource name
    echo "### 📄 [$filename]($filepath)" >> $output_file

    # print resource description
    # check if description key exists
    valid_key_check=$(jq -r '.resources['$i'] | has("description")' datapackage.json)
    # if description key exists, add description to $output_file
    if [ "$valid_key_check" = "true" ]; then
        
        echo "$(cat datapackage.json | jq -r '.resources['$i'].description')" >> $output_file
    else
        # if show_warnings flag is true, print warning
        if [ "$show_warnings" = true ]; then
            echo -e "⚠️  Warning: Description key not found for $filename"
            echo "Description info will not be added to $output_file"
        fi
    fi

    # print resource path
    echo "- Path: \`$filepath\`" >> $output_file

    # print url if user_repo is set
    if [ -n "$user_repo" ]; then
        echo "- URL: https://raw.githubusercontent.com/$username/$repository/main/$filepath" >> $output_file
    fi

    # check if delimiter key exists
    valid_key_check=$(jq -r '.resources['$i'].dialect.csv | has("delimiter")' datapackage.json)
    # if delimiter key exists, add delimiter info to $output_file
    if [ "$valid_key_check" = "true" ]; then
        delimiter=$(jq -r '.resources['$i'].dialect.csv.delimiter' datapackage.json)
        echo "- Delimiter: \`$delimiter\`" >> $output_file
    else
        # if show_warnings flag is true, print warning
        if [ "$show_warnings" = true ]; then
            echo -e "⚠️  Warning: Delimiter key not found for $filename"
            echo "Delimiter info will not be added to $output_file"
        fi
    fi

    # check if encoding key exists
    valid_key_check=$(jq '.resources['$i'] | has("encoding")' datapackage.json)
    # if encoding key exists, add encoding info to $output_file
    if [ "$valid_key_check" = "true" ]; then
        echo "- Encoding: \`$(cat datapackage.json | jq -r '.resources['$i'].encoding')\`" >> $output_file
    else
        # if show_warnings flag is true, print warning
        if [ "$show_warnings" = true ]; then
            echo -e "⚠️  Warning: Encoding key not found for $filename"
            echo "Encoding info will not be added to $output_file"
        fi
    fi

    # add line break
    echo "" >> $output_file

    # create schema csv table, join title and description
    jq '.resources['$i'].schema.fields' datapackage.json | jq 'map(if has("title") and has("description") then . + {"join": "\(.title): \(.description)"} elif has("title") then . + {"join": .title} elif has("description") then . + {"join": .description} else . end)[] | {Field: .name, Type: .type, Description: (.join // "")}'  | mlr --j2c cat > frct-schema-$i.csv

    # if $filepath exists, create example csv table (transpose first row of $filepath)
    if [ -f $filepath ]; then
        # create header
        echo "Field,Example" >> frct-example-$i.csv

        # transpose first row of $filepath
        mlr --csv head -n 1 $filepath | mlr --csv -N put -q 'for (k,v in $*) { @arr[k][NR] = v } end { emit @arr }' >> frct-example-$i.csv

        # join schema and example csv tables
        mlr --csv join -j Field -f frct-schema-$i.csv frct-example-$i.csv > tmp-frct-schema-$i.csv
        mv tmp-frct-schema-$i.csv frct-schema-$i.csv
    else
        # if show_warnings flag is true, print warning
        if [ "$show_warnings" = true ]; then
            echo -e "⚠️  Warning: $filepath not found. Your $output_file will not contain the example column."
        fi
    fi
    
    # convert frct-schema-$i.csv to markdown and add to $output_file
    mlr --c2m cat frct-schema-$i.csv >> $output_file

    # if frct-schema-$i.csv exists, delete it
    if [ -f frct-schema-$i.csv ]; then
        rm frct-schema-$i.csv
    fi

    # if frct-example-$i.csv exists, delete it
    if [ -f frct-example-$i.csv ]; then
        rm frct-example-$i.csv
    fi

    # add a line break
    echo "" >> $output_file
done


### PACKAGE LICENSE ###
# if license key exists, add license to $output_file
valid_key_check=$(jq -r '. | has("licenses")' datapackage.json) 
if [ "$valid_key_check" = "true" ]; then
    echo "## 📖 License" >> $output_file
    
    # if name key exists, assign license name to variable
    valid_key_check=$(jq -r '.licenses[0] | has("name")' datapackage.json)
    if [ "$valid_key_check" = "true" ]; then
        license_name=$(jq -r '.licenses[0].name' datapackage.json)
    fi
    
    # if path key exists, assign license path to variable
    valid_key_check=$(jq -r '.licenses[0] | has("path")' datapackage.json)
    if [ "$valid_key_check" = "true" ]; then
        license_path=$(jq -r '.licenses[0].path' datapackage.json)
    fi

    # if title key exists, assign license title to variable
    valid_key_check=$(jq -r '.licenses[0] | has("title")' datapackage.json)
    if [ "$valid_key_check" = "true" ]; then
        license_title=$(jq -r '.licenses[0].title' datapackage.json)
    fi
    
    # if variables license_name, license_path and license_title exist, print
    if [ -n "$license_name" ] && [ -n "$license_path" ] && [ -n "$license_title" ]; then
        echo "This work is licensed under a ["$license_title"]("$license_path") ("$license_name") License" >> $output_file
    
    # if variables license_name and license_path exist, print
    elif [ -n "$license_name" ] && [ -n "$license_path" ]; then
        echo "This work is licensed under a ["$license_name"]("$license_path") License" >> $output_file

    # if variables license_name and license_title exist, print
    elif [ -n "$license_name" ] && [ -n "$license_title" ]; then
        echo "This work is licensed under a "$license_title" ("$license_name") License" >> $output_file

    # if variables license_path and license_title exist, print
    elif [ -n "$license_path" ] && [ -n "$license_title" ]; then
        echo "This work is licensed under a ["$license_title"]("$license_path") License" >> $output_file

    # if license_name variable exists, print
    elif [ -n "$license_name" ]; then
        echo "This work is licensed under a "$license_name" License" >> $output_file
    
    # if license_path variable exists, print
    elif [ -n "$license_path" ]; then
        echo "This work is licensed under "$license_path >> $output_file
    fi

    # add a line break
    echo "" >> $output_file
else
    # if show_warnings flag is true, print warning
    if [ "$show_warnings" = true ]; then
        echo -e "⚠️  Warning: License key not found"
        echo "Your $output_file will not contain a license"
    fi
fi


### PACKAGE CONTRIBUTORS ###
# check if contributors key exists
valid_key_check=$(cat datapackage.json | jq -r '. | has("contributors")')
# if contributors key exists, add contributors table to $output_file
if [ "$valid_key_check" = "true" ]; then
    # print contributors title to $output_file
    echo "## 👥 Contributors" >> $output_file
    # add contributors table to $output_file
    cat datapackage.json | jq '[.contributors[] | {Name: .title, Role: .role, Email: .email}]' | mlr --j2m cat >> $output_file
else
    # if show_warnings flag is true, print warning
    if [ "$show_warnings" = true ]; then
        echo -e "⚠️  Warning: Contributors key not found"
        echo "Your $output_file will not contain a contributors table"
    fi
fi


### CLEANUP ###
# if package is yaml, delete json created
if [ "$package_format" = "yaml" ]; then
    rm datapackage.json
fi


### END ###
echo "✅ $output_file created"